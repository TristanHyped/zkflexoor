use mpt::mpt_leaf;

global HONK_VK_SIZE: u32 = 112;
global HONK_PROOF_SIZE: u32 = 456;
global HONK_IDENTIFIER: u32 = 1;
global INNER_VERIFICATION_KEY: [Field; HONK_VK_SIZE] = [
    0x0000000000000000000000000000000000000000000000000000000000100000,
    0x00000000000000000000000000000000000000000000000000000000000000e1,
    0x0000000000000000000000000000000000000000000000000000000000000001,
    0x00000000000000000000000000000000000000000000000000000000000000d1,
    0x0000000000000000000000000000003cb2d554af0b8b103e82fae73fcbbe709f,
    0x0000000000000000000000000000000000060067417997ce586f712028b33d4e,
    0x0000000000000000000000000000000801382802879eb02b410bb8072e0e0958,
    0x0000000000000000000000000000000000050587f8e9f80e4cee26f233c31695,
    0x000000000000000000000000000000408a4e4d7579df14c5bbb57b690bfab23e,
    0x000000000000000000000000000000000016f2f24abb4eddda99d5d6b3f8d545,
    0x000000000000000000000000000000cfe0a3b3b0dbd22f2f6d0e09a6d06f9de9,
    0x000000000000000000000000000000000024470ef4f44d70e108f52074e87da5,
    0x0000000000000000000000000000000f1c9098cac605d3352b0538fec2764352,
    0x000000000000000000000000000000000027b905183936e7f06ab4f683c295c2,
    0x00000000000000000000000000000006fb88c0db5f5dfb299d45503b8820dd55,
    0x00000000000000000000000000000000002bc561ae3cf41d87e8af3355b764ae,
    0x0000000000000000000000000000009eb47fc90e32bdb7a2c43ee0fa785086a9,
    0x0000000000000000000000000000000000251ad71f9c38f4a984455bfba58533,
    0x00000000000000000000000000000012a9db8d9d805bcb01df3199478e577fa6,
    0x000000000000000000000000000000000010f71c38341642415b03484b6ce858,
    0x00000000000000000000000000000032242a0ed0375401ca68a9142ad8d8782a,
    0x00000000000000000000000000000000002a52fe600d05324f193b15a63886f6,
    0x0000000000000000000000000000004671d5916c41a85be9bac980961dcba298,
    0x0000000000000000000000000000000000082d3601e763b2e5d6dbab5f4a6f6a,
    0x000000000000000000000000000000b438a1e7879479a34806aba7bd60cfc9aa,
    0x000000000000000000000000000000000014c5d4d8b1f27fb8be36fa059f863d,
    0x00000000000000000000000000000080819f7a1013ac1794e36e18bebb837e00,
    0x00000000000000000000000000000000001a8a8213adf91ce59842d60819232e,
    0x00000000000000000000000000000077bd034bbdf89c1f09f28934f9d3ade9bf,
    0x00000000000000000000000000000000002bb60839c7e66bdb087f290de6bbf1,
    0x000000000000000000000000000000ddbb8f9894071904b358df6232dd74a706,
    0x0000000000000000000000000000000000014806c349fdb50b926e712145c222,
    0x00000000000000000000000000000009d1700e4e3f90b38f8dc5fc88ee47b346,
    0x00000000000000000000000000000000001f2a2db200acb9909aad321f28392a,
    0x0000000000000000000000000000003772f6ecacb6b6522f839b1ba76085ffe6,
    0x00000000000000000000000000000000000eadf6a3a35f5c1b3241acac35fc68,
    0x0000000000000000000000000000001bb1e3ced13e51d844d9f598307778efe7,
    0x00000000000000000000000000000000000bb0e6839638135668c23d4a492bda,
    0x0000000000000000000000000000001021d80a9ccc557b991a5ce5bafb88b5e2,
    0x000000000000000000000000000000000008856b58d4a5e338f0db85ae21b654,
    0x000000000000000000000000000000e43fd25508f60f14f3824b1f1182c8a560,
    0x00000000000000000000000000000000002f187ec9a99933549139095fa193cd,
    0x000000000000000000000000000000bf7c0bec972204ed91d16d8dc88d270e10,
    0x0000000000000000000000000000000000249a4e4c3b875d6b4254fc93846f76,
    0x0000000000000000000000000000006c2ad6c5196e2550be2cc1f707eff95762,
    0x0000000000000000000000000000000000041cbe0d998467eab8ee24c9bfbf4d,
    0x000000000000000000000000000000ab1f9dd1b4586632dbe875d4c33f60cdc2,
    0x000000000000000000000000000000000004c74e35ed81353dabc1d41a60abc5,
    0x0000000000000000000000000000004f69cebd61be52d0af41a6c131978b482b,
    0x000000000000000000000000000000000009c39b93b33ba55e5fb75637f894a4,
    0x0000000000000000000000000000006f3be3f73a507b952136e8dba61ec8ab37,
    0x000000000000000000000000000000000021bb732d86cb74dfb83d92d604dc63,
    0x000000000000000000000000000000fb6ad313897ffd754b4d15093c2dc1e45a,
    0x000000000000000000000000000000000025f0cf1d89209fd76e4a623c14f0ba,
    0x0000000000000000000000000000003a1762617b8ad20ea5433620606d25aeda,
    0x000000000000000000000000000000000009c706451c801de3e70459a0a81308,
    0x000000000000000000000000000000b2a1c0ee2a859499917efec7cfe8f12468,
    0x000000000000000000000000000000000007ed96d7407eeff2b39fdcf83b738f,
    0x00000000000000000000000000000036dab70855dd4ee6cf09fd7a7b0f80593b,
    0x00000000000000000000000000000000002f67b5e2e161d9fdf69aa9f31587b5,
    0x0000000000000000000000000000009b68dfd455c7c1f9d5c123904e47f58420,
    0x000000000000000000000000000000000001a9ec18e14a49e148983aaaac1558,
    0x00000000000000000000000000000074bf21da54b0b70a06882d23016799cfcd,
    0x00000000000000000000000000000000000b66f62c1c30d7aa8e98354f424d64,
    0x0000000000000000000000000000008db28c7159dac4cebc29e533d1df4e8d48,
    0x000000000000000000000000000000000015598694531a356177457e25a9e1c5,
    0x000000000000000000000000000000457c1746f461548d4b85b110d19941ac95,
    0x0000000000000000000000000000000000227b526b1ce529ba2f9b51eb22a9f8,
    0x00000000000000000000000000000089d3304d83e3464c98a777edc500a8a389,
    0x00000000000000000000000000000000000651fa53e77d1a07a9a368384bc1e5,
    0x0000000000000000000000000000002474f0592950bc7b3067e502650c963dfa,
    0x000000000000000000000000000000000020b6b415cd6ce2428b1a644387daa1,
    0x00000000000000000000000000000055cefcb25a053fb920c6f849816723ca37,
    0x000000000000000000000000000000000020c1732bbe9cb2779323236ac2003c,
    0x00000000000000000000000000000009d0b078899b35e7ce123b70fae8a5ef7d,
    0x00000000000000000000000000000000000dbbb25edda4537a2a16fdca72396d,
    0x0000000000000000000000000000008ea08a9d011afa5b0fb29f8ef788e412f0,
    0x00000000000000000000000000000000002264789ebb9f563ba461da3c6bed6e,
    0x000000000000000000000000000000645208eddf82256ad4b31e8f06a4862155,
    0x0000000000000000000000000000000000144b56cb22d2b7b1bfdcf30588ffc2,
    0x0000000000000000000000000000008bcca53d3c3413bba9ba3d80930487ba44,
    0x000000000000000000000000000000000025fef630d1a650b9eba9f188209b3f,
    0x000000000000000000000000000000838756a020ad8c38f8ef2051c02d60d314,
    0x00000000000000000000000000000000002c3339320aaceca25b01212849fa13,
    0x000000000000000000000000000000813fc577ba56516a4f8f0ee54ad6945bc7,
    0x00000000000000000000000000000000000ca00bc57defb1c1b7074b46063cd4,
    0x000000000000000000000000000000b1e528799b8ca66b61802ba2dd78d650f4,
    0x00000000000000000000000000000000001abba282d64bb17425b991386d36ec,
    0x0000000000000000000000000000000f5f0ae9e418eac6701555f2da66c7edfb,
    0x000000000000000000000000000000000024107990b7a062ca6ede029546a55b,
    0x0000000000000000000000000000003e3482a5d156209d086c213678b903bcd5,
    0x0000000000000000000000000000000000028be7e8c752b49429449f302d6a01,
    0x000000000000000000000000000000780597914ebc616da98f76bddd3f0a9873,
    0x0000000000000000000000000000000000095f2516e4dd67a2b47a8a58ff7f80,
    0x000000000000000000000000000000bb006b0ab86945a958543ddebc2716801a,
    0x00000000000000000000000000000000001d5664268bd06e0f5e37f9d004a910,
    0x0000000000000000000000000000005fe61865bd289eb4ed6435ba7b4ec9c8eb,
    0x00000000000000000000000000000000001f12f727b0defc209134f353210216,
    0x000000000000000000000000000000176a98fd81e16be7c2d265f1590ecdffbb,
    0x00000000000000000000000000000000000c02183c3283384c4a033193ebda3f,
    0x000000000000000000000000000000e8ded17ad35fda303c80005c2396049799,
    0x00000000000000000000000000000000000d015bbdd88b68a0e6c045205077e2,
    0x000000000000000000000000000000de925dfd82e508bf219334ebd9566e02dc,
    0x0000000000000000000000000000000000171b50828e1ee2c782fb258fbfa7d8,
    0x0000000000000000000000000000000000000000000000000000000000000001,
    0x0000000000000000000000000000000000000000000000000000000000000000,
    0x0000000000000000000000000000000000000000000000000000000000000002,
    0x0000000000000000000000000000000000000000000000000000000000000000,
    0x000000000000000000000000000000ecc61530e4dc6424f9ed252ab3c9f280fc,
    0x00000000000000000000000000000000001661792d1dd21484cb5c7cbf9b0173,
    0x000000000000000000000000000000d0dae36f2922d9f9ff610666ed146270ce,
    0x0000000000000000000000000000000000290aa27e0957a4f3fef282e68808b7
];

fn verify_signature(address: [u8; 20], hashed_message : [u8; 32], pub_key_x : [u8; 32], pub_key_y : [u8; 32], signature : [u8; 64]) {
    let key = ecrecover::secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);
    let addr = key.ecrecover(signature, hashed_message);

    let mut sum: Field = 0;
    for i in 0 .. 19 {
        let x = address[i] as Field;
        sum += x;
        sum *= 0x100;
    }
    sum += address[19] as Field;
    assert(addr == sum);
}

fn verify_balance(
    account: mpt_leaf::Account,
    balance_target: [u8; 32],
    balance_target_length: u8
    ) {

    // balance target
    let mut result: u8 = 0;
    if account.balance_length < balance_target_length {
        result = 1;
    } else if account.balance_length > balance_target_length {
        result = 2;
    } else {
        for i in 0 .. 32 {
            if result == 0 {
                if account.balance[i] < balance_target[i] {
                    result = 1;
                } else if account.balance[i] > balance_target[i] {
                    result = 2;
                }
            }
        }
    }
    assert(result == 2);
}

// leaf
fn main(
    account: mpt_leaf::Account,
    root: pub [u8; 32], 

    hashed_message : pub [u8;32], pub_key_x : [u8;32], pub_key_y : [u8;32], signature : [u8;64],

    balance_target: pub [u8; 32],
    balance_target_length: pub u8,
    trie_key_index: u8,

    // verification_key: pub [Field; HONK_VK_SIZE],
    proof: [Field; HONK_PROOF_SIZE],
    public_inputs: [Field; 97 + HONK_VK_SIZE]
    // root: pub [u8; 32], 
    // trie_key: pub [u8; 32], 
    // trie_key_new_index (new starting index): pub u8, 
    // this_segment_root (new_root): pub [u8; 32]
    // verification_key: pub [Field, 112] -> it must be inner_mpt_body verification key
) {
    verify_signature(account.address, hashed_message, pub_key_x, pub_key_y, signature);
    
    std::verify_proof_with_type(
        INNER_VERIFICATION_KEY,
        proof,
        public_inputs,
        0x0,
        HONK_IDENTIFIER,
    );
    let mut trie_key: [u8; 32] = [0; 32];
    let mut leaf_hash: [u8; 32] = [0; 32];

    for i in 0 .. 32 {
        trie_key[i] = public_inputs[i + 32] as u8;
    }

    for i in 0 .. 32 {
        assert(public_inputs[i] == root[i] as Field);
    }

    assert(public_inputs[64] == trie_key_index as Field);

    for i in 0 .. 32 {
        leaf_hash[i] = public_inputs[i + 65] as u8;
    }

    for i in 0 .. HONK_VK_SIZE {
        assert(public_inputs[i + 97] == INNER_VERIFICATION_KEY[i]);
    }
    
    account.verify_leaf_node(
        trie_key_index,
        trie_key,
        leaf_hash
    );

    // balance target
    verify_balance(account, balance_target, balance_target_length);
}
