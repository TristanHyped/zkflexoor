use mpt::mpt_body;
global MAX_PATH_LEANGTH: u32 = 1;

global HONK_VK_SIZE: u32 = 112;
global HONK_PROOF_SIZE: u32 = 456;
global HONK_IDENTIFIER: u32 = 1;
global INITIAL_VERIFICATION_KEY: [Field; HONK_VK_SIZE] = [
    0x0000000000000000000000000000000000000000000000000000000000100000,
    0x00000000000000000000000000000000000000000000000000000000000000e1,
    0x0000000000000000000000000000000000000000000000000000000000000001,
    0x00000000000000000000000000000000000000000000000000000000000000d1,
    0x00000000000000000000000000000073dc278831b44e1bc30061553bf23d565e,
    0x000000000000000000000000000000000014f385dff03fea62527fd014b3eeb6,
    0x0000000000000000000000000000007d98655674ad687d5d4fb8d84f8b48e8f9,
    0x000000000000000000000000000000000024deeadd47f4e562f468f8e53faa3f,
    0x00000000000000000000000000000092cc768cf63889f96e91137ed25effae54,
    0x0000000000000000000000000000000000136ca5311da60ad25b2540017fe01f,
    0x00000000000000000000000000000001c2b91d76ad0f6f81ac081294ddb439bf,
    0x0000000000000000000000000000000000304b8a9b86160ad5d25037b5201879,
    0x000000000000000000000000000000d5dd371e3848d386b8c33dc1aae72e7247,
    0x00000000000000000000000000000000001999009a1587c09c780e28a81fe042,
    0x0000000000000000000000000000001fc8fd572de1a23abf16c91c345951b497,
    0x000000000000000000000000000000000001d47c77ab9e24f5ef05fb27c0dc0a,
    0x00000000000000000000000000000033c60e1107695778c46db5dd1463eccca3,
    0x000000000000000000000000000000000018b7417b72a8a6233b43f3e4fb94d6,
    0x000000000000000000000000000000153dd6ca9caf3d941d13ecba5dba97eed6,
    0x000000000000000000000000000000000026d20208e0b99c37686d6d58014de0,
    0x000000000000000000000000000000e6825b7495c9c1a9b384ebe593ca59fa83,
    0x0000000000000000000000000000000000122e8cca852e7bc809e8fc84e06ce2,
    0x00000000000000000000000000000006cae87a2a7a5666cf8abeb32f519eb6b3,
    0x00000000000000000000000000000000000b0f5bec2c2f6f0ab74b5a7fb712c5,
    0x000000000000000000000000000000adbad0b5e1cd39c13f2f11688487986e61,
    0x00000000000000000000000000000000002fa0740da426bcd6fb08dd0f9453ae,
    0x000000000000000000000000000000b0eb0651de8ee28910e678f2e36e50d791,
    0x00000000000000000000000000000000001aa1ae55eac8055a8ee85d686ddd79,
    0x0000000000000000000000000000002acb4a8b4a62c2e5ba1a60eae5fb4e1311,
    0x000000000000000000000000000000000018739bfe3f5a24d49100c2d90c5423,
    0x0000000000000000000000000000001956d58c2bd823ca694d88e48ea00ef214,
    0x0000000000000000000000000000000000256bfd89978aa10f52ef82b79e7838,
    0x000000000000000000000000000000e84e4bd4e9efba12ae4fd5fe7ba0c01274,
    0x00000000000000000000000000000000002871e369f8e6cbbed9f495364d7531,
    0x000000000000000000000000000000f04830a0699b096e20c7c7616b9bc2e194,
    0x00000000000000000000000000000000001af4b01c71b26c7c9d54da2dd46341,
    0x000000000000000000000000000000718ce07c97a63685cfecba904f84c22384,
    0x00000000000000000000000000000000000c56e02203b8b69547cae7d2de7305,
    0x000000000000000000000000000000a1f52b8a372396fb47e156be5b9579a94a,
    0x000000000000000000000000000000000019bcc6be9e55e3e12ca75f7cc4c9ff,
    0x0000000000000000000000000000001d0ecf5fc8ff4c8d918be72a59851c887a,
    0x00000000000000000000000000000000001428d627316fb2648a498fdf3e0c52,
    0x0000000000000000000000000000008f2c93819d001ce5e058a38bca1bdcfee2,
    0x00000000000000000000000000000000002886ba4602ffc26ac23a26c411ba2c,
    0x0000000000000000000000000000007de6c45c29f59747f7ab9d8dcb039e44f6,
    0x00000000000000000000000000000000001a7a4e6f4ad6704376444b78018ced,
    0x0000000000000000000000000000008a3972b5357a9c012d398431ffa8d66d5a,
    0x00000000000000000000000000000000002156fdee876cc56a9e66f1f29b0491,
    0x00000000000000000000000000000020a8684ec4648b243f2efe58499cea1e73,
    0x0000000000000000000000000000000000219abf513e464ebec96d3b508b7b5b,
    0x000000000000000000000000000000a9e78151286d1b5f613a0baa821e129ae5,
    0x0000000000000000000000000000000000060ff27d6af6551efa7e8fc749b72e,
    0x0000000000000000000000000000005970c61bac717a7245c88d20a94a9d01e4,
    0x00000000000000000000000000000000002512f20db1034f572f49538a6bf8e4,
    0x0000000000000000000000000000002b78d87c485f670b7aba20464ab60f97d2,
    0x0000000000000000000000000000000000028bc00f6543f703b4954c1b3a80ed,
    0x0000000000000000000000000000009532c3650d8cfcf5db421e074dcb3c7a72,
    0x00000000000000000000000000000000002720e390620a62136549b83dfb70e2,
    0x000000000000000000000000000000388c46a0e91be66903e7f24b9b6810b6ab,
    0x000000000000000000000000000000000004c71d8db77e42bde1707b019eedc9,
    0x000000000000000000000000000000ac8473e7738215227ca94c737aaf8d9414,
    0x00000000000000000000000000000000002dff3c380a17aa0a4ddb4486f08bc7,
    0x000000000000000000000000000000fea2d662a7b688fe114cdef21785309b6a,
    0x00000000000000000000000000000000002ae34bc95c91ad3e1b5fbcba2b927a,
    0x0000000000000000000000000000003e948ce5860e9ee4775ce1e35e4e20bc9a,
    0x00000000000000000000000000000000002d551e875a2e28dadcaca8e3c3c8c0,
    0x00000000000000000000000000000028cf09d8f637d694f9b20fb0911f03fd42,
    0x00000000000000000000000000000000002e490c2130f841a208594b5b914537,
    0x00000000000000000000000000000097d45c4c48b424d9af8bc8a5c288d8433a,
    0x00000000000000000000000000000000000296fc8c5d816454dbabfee90af904,
    0x0000000000000000000000000000009951f45b07dc00ef35d33cdd1ba6b3059f,
    0x00000000000000000000000000000000001136299b8ea3efb5dca56dc8987a0f,
    0x000000000000000000000000000000dd8bb525948b0e369d29cf7608de08fc0e,
    0x000000000000000000000000000000000018362d59c5cadfe68f5a60a6175ee7,
    0x0000000000000000000000000000004d0ed9b96fd304689fdad4a3a736c45a4f,
    0x0000000000000000000000000000000000032c56a01d661d85126fcf7e13ec8c,
    0x000000000000000000000000000000b87d2fa930e196c48b09a04073b0a07af0,
    0x00000000000000000000000000000000002011f6452ad0da47f31f62c3117bb2,
    0x0000000000000000000000000000006f2a87a87bd006216430c33bff722c88c9,
    0x000000000000000000000000000000000021bc2997a4c5619e7ca4315126e957,
    0x0000000000000000000000000000009a3fca90d157a5728352376e4ca56fb7c3,
    0x00000000000000000000000000000000000bc5de34ca18c68e9f327e4cfc5bef,
    0x000000000000000000000000000000d02bc3b7810c02ff2288ed4fc3e1fdbec5,
    0x00000000000000000000000000000000002baf3f7d1d8e8e8194d1411423d24f,
    0x000000000000000000000000000000470e45fd13a0c34df2cb996c2617743100,
    0x00000000000000000000000000000000000bd16771a39fef08fcd588295fb4e1,
    0x000000000000000000000000000000f45658b7daba537817dfc5600442c386ca,
    0x00000000000000000000000000000000001dceed44037941a32e87b9e28a744f,
    0x0000000000000000000000000000000f5f0ae9e418eac6701555f2da66c7edfb,
    0x000000000000000000000000000000000024107990b7a062ca6ede029546a55b,
    0x0000000000000000000000000000003e3482a5d156209d086c213678b903bcd5,
    0x0000000000000000000000000000000000028be7e8c752b49429449f302d6a01,
    0x000000000000000000000000000000780597914ebc616da98f76bddd3f0a9873,
    0x0000000000000000000000000000000000095f2516e4dd67a2b47a8a58ff7f80,
    0x000000000000000000000000000000bb006b0ab86945a958543ddebc2716801a,
    0x00000000000000000000000000000000001d5664268bd06e0f5e37f9d004a910,
    0x0000000000000000000000000000005fe61865bd289eb4ed6435ba7b4ec9c8eb,
    0x00000000000000000000000000000000001f12f727b0defc209134f353210216,
    0x000000000000000000000000000000176a98fd81e16be7c2d265f1590ecdffbb,
    0x00000000000000000000000000000000000c02183c3283384c4a033193ebda3f,
    0x000000000000000000000000000000e8ded17ad35fda303c80005c2396049799,
    0x00000000000000000000000000000000000d015bbdd88b68a0e6c045205077e2,
    0x000000000000000000000000000000de925dfd82e508bf219334ebd9566e02dc,
    0x0000000000000000000000000000000000171b50828e1ee2c782fb258fbfa7d8,
    0x0000000000000000000000000000000000000000000000000000000000000001,
    0x0000000000000000000000000000000000000000000000000000000000000000,
    0x0000000000000000000000000000000000000000000000000000000000000002,
    0x0000000000000000000000000000000000000000000000000000000000000000,
    0x0000000000000000000000000000008f08583be7e558702318ee9de656d5c965,
    0x000000000000000000000000000000000020b15da9aadea977340c771213bc2b,
    0x00000000000000000000000000000057e43d0ec71960814cf612a621394b9953,
    0x000000000000000000000000000000000002bcd955ab1e1a25bb66133bc6d342
];

// inner layers
fn main(
    nodes: [mpt_body::Node; MAX_PATH_LEANGTH], 
    node_length: u32,


    root: pub [u8; 32],
    trie_key: pub [u8; 32],
    trie_key_new_index: pub u32,
    new_root: pub [u8; 32],

    verification_key: pub [Field; HONK_VK_SIZE],
    is_first_inner_layer: bool,
    proof: [Field; HONK_PROOF_SIZE],
    public_inputs: [Field; 97 + HONK_VK_SIZE]
    // root: pub [u8; 32], 
    // trie_key: pub [u8; 32], 
    // trie_key_new_index (new starting index): pub u8, 
    // this_segment_root (new_root): pub [u8; 32]
    // verification_key: pub [Field, 112] -> it must be inner_mpt_body verification key
) {
    let this_segment_root_index_in_inputs = 65;
    let trie_key_initial_index = public_inputs[64] as u32;
    let root_index_in_inputs = 0;
    let trie_key_index_in_inputs: u32 = 32;
    let mut this_segment_root: [u8; 32] = [0; 32];
    for i in 0 .. 32 {
        this_segment_root[i] = public_inputs[i + this_segment_root_index_in_inputs] as u8;
    }

    root.for_eachi(|i, x| {
        assert(x == public_inputs[i + root_index_in_inputs] as u8);
    });

    trie_key.for_eachi(|i, x| {
        assert(x == public_inputs[i + trie_key_index_in_inputs] as u8);
    });

    for i in 0 .. HONK_VK_SIZE {
        assert(verification_key[i] == public_inputs[i + 97]);
    }
    let mut final_verification_key: [Field; HONK_VK_SIZE] = [0; HONK_VK_SIZE];
    if is_first_inner_layer {
        final_verification_key = INITIAL_VERIFICATION_KEY;
    } else {
        for i in 0 .. HONK_VK_SIZE {
            final_verification_key[i] = verification_key[i];                
        }
    }
    std::verify_proof_with_type(
        final_verification_key,
        proof,
        public_inputs,
        0x0,
        HONK_IDENTIFIER,
    );

    mpt_body::verify_nodes(
        nodes, 
        node_length,
        trie_key_initial_index,
        this_segment_root, 
        trie_key, 
        trie_key_new_index, 
        new_root);
}